#!/usr/bin/env fish
#
# Setup all the dotfiles into a new machine.
# May be run multiple times in the same machine.
# Usage: ./setup
#
# GitHub Codespaces:
# - This script is executed automatically in the container startup
# - Logs: /workspaces/.codespaces/.persistedshare/creation.log

# You should always run this script from the repository root
set dotfiles_dir $PWD

set user_bin $HOME/bin

set fancy_diff_url https://github.com/so-fancy/diff-so-fancy/releases/download/v1.4.4/diff-so-fancy
set replace_url https://raw.githubusercontent.com/aureliojargas/replace/main/replace.py

function is_termux
    string match -q '*termux*' $HOME
end

function is_macos
    test (uname) = Darwin
end

function is_linux
    test -f /etc/debian_version
    and not is_github_codespace
    and not is_chromeos
    and not is_android
end

function is_chromeos
    test (uname -n) = penguin
end

function is_github_codespace
    test "$CODESPACES" = true
end

function is_android  # available since Android 15
    test "$USER" = droid
end

function log
    set_color cyan
    echo "[$argv]"
    set_color normal
end

function done
    if set -q argv[1]
        set message $argv
    else
        set message Done
    end
    set_color green
    echo ✓ $message
    set_color normal
end

function already_done
    if set -q argv[1]
        set message $argv
    else
        set message Already done
    end
    set_color yellow
    echo ✓ $message
    set_color normal
end

function failed
    if set -q argv[1]
        set message $argv
    else
        set message Failed
    end
    set_color red
    echo × $message
    set_color normal
end

function run
    set fish_trace 1
    $argv
    set fish_trace 0
end

function download
    run curl --location --silent --output $argv[2] $argv[1]
end

function apt_install
    run sudo apt --yes --quiet --quiet install --no-install-recommends $argv
end

function brew_install
    run brew install --quiet $argv
end

function pipx_install
    run pipx install $argv
end

function create_symlink -a target symlink
    if not test (count $argv) -eq 2
        echo ERROR: usage: create_symlink target symlink
        exit 1
    end

    # Make sure the symlink parent dir exists
    mkdir -p (dirname $symlink)

    if test -L $symlink
        if test (readlink $symlink) = $target
            already_done $symlink is already done
        else
            failed $symlink is a symlink to an unknown file
        end
    else if test -f $symlink
        failed $symlink is a normal file, skipping symlink creation
    else if test -d $symlink
        failed $symlink is a directory, skipping symlink creation
    else
        ln -s -v $target $symlink
    end
end

#-----------------------------------------------------------------------

log 'Detecting the platform'
is_termux; and echo Termux
is_macos; and echo macOS
is_linux; and echo Linux
is_chromeos; and echo ChromeOS '(Crostini)'
is_github_codespace; and echo GitHub Codespace
is_android; and echo Android native Terminal.app

if is_github_codespace
    # This repo is always cloned in every codespace because I've enabled
    # it in my user configuration: Automatically install dotfiles
    set dotfiles_dir /workspaces/.codespaces/.persistedshare/dotfiles
end

set paths \
    .aliases \
    .config/fish/conf.d/my.fish \
    .config/fish/functions/brew_activate.fish \
    .config/fish/functions/fish_prompt.fish \
    .config/micro/bindings.json \
    .config/micro/plug \
    .config/micro/settings.json \
    .gemrc \
    .gitconfig \
    .inputrc \
    .screenrc \
    .tmux.conf \
    .vim \
    .vimrc

if is_termux
    set paths $paths \
        .config/fish/conf.d/my.termux.fish \
        .termux
end

if is_macos
    set paths $paths \
        .config/fish/conf.d/my.osx.fish
end

log 'Create symlinks'
for path_ in $paths
    create_symlink $dotfiles_dir/$path_ $HOME/$path_
end

if is_chromeos
    rm $HOME/.config/micro/bindings.json
    create_symlink \
        $dotfiles_dir/.config/micro/bindings.chromeos.json \
        $HOME/.config/micro/bindings.json
end

log 'Create user bin directory'
if test -d $user_bin
    already_done
else
    mkdir -p -v $user_bin
end

log 'Install my scripts in ~/bin'
for path_ in bin/*
    create_symlink $dotfiles_dir/$path_ $HOME/$path_
end

log 'Install diff-so-fancy in user bin'
set fancy_diff $user_bin/diff-so-fancy
if test -f $fancy_diff; and test -x $fancy_diff
    already_done
else
    download $fancy_diff_url $fancy_diff
    chmod +x $fancy_diff
    done Installed $fancy_diff
end

log 'Install the replace script'
set replace_path $user_bin/replace
if command --search --quiet replace
    already_done
else
    download $replace_url $replace_path
    chmod +x $replace_path
    done Installed $replace_path
end

log 'Install extra software'
if is_macos
    brew_install coreutils ed fish git-delta git-revise gnu-sed lazygit micro notunes pipx python shellcheck tig tree uv wget

else if is_termux
    pkg update
    pkg install file fish git git-delta lazygit make openssh python tig tree vim
    pkg install termux-api  # for pbcopy/pbpaste aliases
    python -m pip install --user pipx
    pipx_install git-revise uv

    log 'Some optional installs you may want to do'
    echo 'pkg install lynx  # funcoeszz'
    echo 'pkg install perl  # diff-so-fancy'
    echo 'pkg install ruby  # Jekyll'

    git config core.editor vim

else if is_linux
    sudo apt --quiet --quiet update
    apt_install ed make python3-pip tig tree
    brew_install fish git-delta git-revise lazygit micro pipx shellcheck uv

    log 'Some optional installs you may want to do'
    echo 'sudo apt install lynx  # funcoeszz'
    echo 'sudo apt install ruby  # Jekyll'

else if is_android
    # brew is not supported on ARM64
    # https://docs.brew.sh/Homebrew-on-Linux#arm-unsupported

    sudo apt --quiet --quiet update
    apt_install ed fish make pipx python3-pip shellcheck tig tree
    pipx_install git-revise uv

    log 'Installing git-delta from GitHub'
    if command -v delta
        already_done
    else
        set delta_arm64_url https://github.com/dandavison/delta/releases/download/0.18.2/git-delta_0.18.2_arm64.deb
        download $delta_arm64_url /tmp/delta.deb
        run sudo dpkg -i /tmp/delta.deb
        done
    end

    log 'Installing micro from GitHub'
    if command -v micro
        already_done
    else
        set micro_version 2.0.14
        set micro_arm64_url https://github.com/zyedidia/micro/releases/download/v$micro_version/micro-$micro_version-linux-arm64.tgz
        download $micro_arm64_url /tmp/micro.tgz
        tar -C /tmp -xzf /tmp/micro.tgz
        cp /tmp/micro-$micro_version/micro ~/bin
        done Installed ~/bin/micro
    end

    git config core.editor micro

    log 'Some optional installs you may want to do'
    echo 'sudo apt install ruby  # Jekyll'

else if is_github_codespace
    # Install the missing software just in case we're running on the
    # default GitHub Codespaces container. This is a noop in my personal
    # devcontainer (https://github.com/aureliojargas/devcontainer) since
    # those are already installed there.
    sudo apt --quiet --quiet update
    apt_install ed git-revise shellcheck tig tree

    # If pipx is available (it's a Python devcontainer), install uv
    pipx_install uv || true

    log 'Installing git-delta from GitHub'
    if command -v delta
        already_done
    else
        set delta_amd64_url https://github.com/dandavison/delta/releases/download/0.18.2/git-delta_0.18.2_amd64.deb
        download $delta_amd64_url /tmp/delta.deb
        run sudo dpkg -i /tmp/delta.deb
        done
    end
end

if is_macos
    log "macOS: Add 'ed' symlink so GNU ed can be used as git core.editor"
    create_symlink /opt/homebrew/opt/ed/bin/ged $HOME/bin/ed
end

log 'Setup Git local configuration (manual intervention needed)'
set git_config_local $HOME/.gitconfig.personal
if is_github_codespace
    # GitHub Codespace sets GIT_COMMITTER_EMAIL and GIT_COMMITTER_NAME
    # env variables to the correct values
    already_done 'Skipped, git email/name already set by env vars.'
else if test -f $git_config_local
    already_done
else
    cp -v $dotfiles_dir/.gitconfig.local.template $git_config_local
    echo Please edit $git_config_local
end

# vim: filetype=fish
