# ~/.gitbash
# Bash setup to improve Git usage
# Include this file from ~/.bashrc

# The Git Prompt magic alien device
# https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
type __git_ps1 > /dev/null 2>&1 || source ~/.git-prompt.sh

# Git prompt
GIT_PS1_SHOWDIRTYSTATE=1       # unstaged (*), staged (+)
#GIT_PS1_SHOWSTASHSTATE=1      # stashed ($)
#GIT_PS1_SHOWUNTRACKEDFILES=1  # untracked (%)
GIT_PS1_SHOWUPSTREAM='auto'    # behind (<), ahead (>), equal (=), diverged (<>)
#GIT_PS1_DESCRIBE_STYLE=branch # master~4 when detached HEAD
GIT_PS1_SHOWCOLORHINTS=1
PROMPT_COMMAND='__git_ps1 "\[\e[m\e[32;1m\]\w\[\e[m\]" "$(z=$?;test $z -gt 0 && echo "|\[\e[31;1m\]$z\[\e[m\]")| " "|%s"'
# Prompt: dir|git-branch|$?| _

# ed: Show a ruler as reference to git commit 50/72 max width
alias ed-ruler="echo '-----------------------------------------------50|-------------------72|'"

# Git aliases
alias gs='git status'
alias gw='git show'
alias gws='git show --stat'
alias gsl='git stash list'
alias gsd='git stash show -p stash@{0}'
alias gd='git diff'
alias gdw='GIT_PAGER= git diff'  # wrap long lines
alias gdc='git diff --cached'
alias ga='git add'
alias gau='git add -u'
alias gap='git add -p'
alias grp='git reset -p'
alias grf='git rebase -i master --autosquash'
alias gc='ed-ruler; git commit'
alias gca='ed-ruler; git commit --amend'
alias gcf='git commit --fixup'
alias gpf='git push -f'
alias gpu='git push -u'
alias gb='git branch -va'
alias gr='git remote -v'
alias gl='git log -n 20 --oneline --reverse --date=short --pretty=format:"%Cblue%h%Creset %C(yellow)%ad%Creset %s"'
alias gla='git log -n 20 --oneline --reverse --date=short --pretty=format:"%Cblue%h%Creset %C(yellow)%ad%Creset %Cred%<(25,trunc)%ae%Creset %s"'
alias gls="gl | cut -d ' ' -f 1,3- | grep '^[0-9a-f]*'"
alias glg='git log --oneline --decorate --all --graph'

# Git functions
gcm() {
    git commit -m "$*"
}
git_cleanup() {
    git fetch -p
    git branch --merged |
        cut -c3- |
        grep -vEx "master|gh-pages" |
        while read branch  # xargs -r not supported in BSD :(
        do
            git branch -d "$branch"
        done
}
git_replace() {  # args: pattern replacement [use_regex]
    # Get replace at https://github.com/aureliojargas/replace
    if test -n "$3"
    then
        git grep -P -I -l "$1" | xargs replace -i -f "$1" -t "$2" --regex
    else
        git grep -F -I -l "$1" | xargs replace -i -f "$1" -t "$2"
    fi
}
git_pull_forced() {
    # I'm assuming 10 commits ago the local is sync'ed with the remote
    git fetch
    git reset --hard HEAD~10
    git merge FETCH_HEAD
}
git_check_author() {
    # List commits from all branches whose author email is not $1
    set -u
    local email="$1"
    branches=$(git branch -a | grep -v ' -> ' | cut -c3-)  # local+remote

    for branch in $branches
    do
        echo "$branch:"
        git log --oneline --date=short --pretty=format:"%h %ad [%ae] %s" "$branch" |
            grep -v -F "[$email]"
    done
}

# Some useful Git commands that I always have to search the web
#
# All commits whose tree has this pattern
# git rev-list --all | xargs git grep PATTERN
#
# All commits that added/removed/edited lines with this pattern
# git log --pickaxe-regex -S PATTERN    # added/removed
# git log -G PATTERN                    # added/removed/edited
#
# Log for a removed file
# git log --full-history -- REMOVED-FILE-PATH

# vim: filetype=sh
