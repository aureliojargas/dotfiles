# https://git-scm.com/docs/git-config#_configuration_file

[alias]  # https://git.wiki.kernel.org/index.php/Aliases

    co = checkout

    commit-message = !sh -c 'git-pre-commit && git commit -m \"$*\"' -

    cp = cherry-pick

    diffw = diff -w --ignore-blank-lines

    g = grep --extended-regexp --break --heading --line-number --ignore-case --show-function

    grep-filename = !sh -c 'git ls-files | grep --color=always $@' -

    # hash, date, email, summary
    log4 = log -n 7 --oneline --reverse --date=short \
        --pretty=format:'%Cblue%h%Creset %C(yellow)%ad%Creset %Cred%<(22,trunc)%ae%Creset %s'

    # hash, date, summary
    log3 = !sh -c 'git log4 $@ --color=always | tr -s \" \" | cut -d \" \" -f 1,2,4-' -

    # hash, summary
    log2 = !sh -c 'git log3 $@ | cut -d \" \" -f 1,4-' -

    log-graph = log --oneline --decorate --all --graph

    new = !sh -c 'git log4 -n 999 @{1}..@{0}'  # What's new since the last git pull?

    uncommit = reset --soft HEAD^

    unstage = reset HEAD

    worddiff = diff --color-words

[commit]
    status = true  # show `git status` output in commit template

[core]
    # editor = ed --loose-exit-status  # ed challenge :)
    editor = micro
    # pager = diff-so-fancy | less --tabs=4 -RFX  # word-highlight diffs
    pager = delta
    excludesfile = ~/.gitignore_global

[color]
    ui = auto

[diff]
    # Color moved lines differently
    # https://dev.to/cloudx/how-to-color-the-moved-code-in-git-10ei
    colormoved = default
    colormovedws = allow-indentation-change

[delta]  # https://github.com/dandavison/delta
    light = false
    syntax-theme = GitHub  # Monokai Extended, ansi-dark, zenburn
    line-numbers = false
    side-by-side = false
    whitespace-error-style = red reverse  # trailing spaces are red
    navigate = true  # n and N move between diff sections

[interactive]
    diffFilter = delta --color-only

[help]
    autocorrect = 1  # fix typos

[pull]
    ff = only

[push]
    # https://git-scm.com/docs/git-config.html#git-config-pushdefault
    default = current  # default in Git 1.x

[remote "origin"]
    prune = true  # Autoremove already deleted remote branches

[remote "upstream"]
    prune = true  # Autoremove already deleted remote branches

[include]
    # Use separate file for username, credentials, etc
    path = ~/.gitconfig.local

# Some useful Git commands that I always have to search the web
#
# All commits whose tree has this pattern
# git rev-list --all | xargs git grep PATTERN
#
# All commits that added/removed/edited lines with this pattern
# git log --pickaxe-regex -S PATTERN    # added/removed
# git log -G PATTERN                    # added/removed/edited
#
# Log for a removed file
# git log --full-history -- REMOVED-FILE-PATH
#
# Change commit date (both)
# git rebase -i, edit the desired commit
# d="2017-10-08T09:51:07"  # gl --date=iso-strict to get it from a commit
# GIT_COMMITTER_DATE="$d" git commit --amend --no-edit --date="$d"
# git rebase --continue
# Note that any `git rebase` on those commits will have CommitterDate set
# to the current date. To avoid that, use --committer-date-is-author-date
#
# Rename a file in history
# git rebase -i, edit the commit that added the file, rename it, amend.
