# http://documentup.com/skwp/git-workflows-book#appendix-a---the-gitconfig

[alias]
    co = checkout
    cp = cherry-pick
    g = grep --extended-regexp --break --heading --line-number --ignore-case --show-function
    worddiff = diff --color-words
    diffw = diff -w --ignore-blank-lines
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
[core]
    editor = ed --loose-exit-status --prompt 'ed> '  # ed challenge :)
    pager = diff-so-fancy | less --tabs=4 -RFX  # word-highlight diffs
    excludesfile = ~/.gitignore_global
[color]
    ui = auto
[color "diff"]
    meta = magenta
[help]
    autocorrect = 1    # fix typos
[commit]
    status = false     # no `git status` output in commit template
[push]
    # https://git-scm.com/docs/git-config.html#git-config-pushdefault
    default = current  # default in Git 1.x

# Autoremove already deleted remote branches
[remote "origin"]
    prune = true
[remote "upstream"]
    prune = true

[include]
    # Use separate file for username, credentials, etc
    path = ~/.gitconfig.local

# Some useful Git commands that I always have to search the web
#
# All commits whose tree has this pattern
# git rev-list --all | xargs git grep PATTERN
#
# All commits that added/removed/edited lines with this pattern
# git log --pickaxe-regex -S PATTERN    # added/removed
# git log -G PATTERN                    # added/removed/edited
#
# Log for a removed file
# git log --full-history -- REMOVED-FILE-PATH
#
# Change commit date (both)
# git rebase -i, edit the desired commit
# d="2017-10-08T09:51:07"  # gl --date=iso-strict to get it from a commit
# GIT_COMMITTER_DATE="$d" git commit --amend --no-edit --date="$d"
# git rebase --continue
# Note that any `git rebase` on those commits will have CommitterDate set
# to the current date. To avoid that, use --committer-date-is-author-date
#
# Rename a file in history
# git rebase -i, edit the commit that added the file, rename it, amend.
